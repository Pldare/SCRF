#!/usr/bin/env ruby -w
# encoding: UTF-8
class D优先队列
  可读属性 :比较属性, :元素数组, :当前大小
  def 初始化(比较属性, 元素数组 = [])
    @比较属性,@元素数组,@当前大小 = 比较属性,[],0
    元素数组.每个{|元素| 添加元素(元素)}
  end
  def 为空?;@当前大小 == 0 end
  def 最高优先级元素;@元素数组[1] end
  def 添加元素(元素)
    @元素数组[@当前大小 += 1] = 元素
    上滤(@当前大小)
  end
  def 获得最高优先级元素
    return nil if 为空?
    返回元素 = @元素数组[1]
    @元素数组[1] = @元素数组[@当前大小]
    @当前大小 -= 1
    下滤(1)
    返回元素
  end
  def 上滤(索引)
    上滤元素 = @元素数组[索引]
    while 索引 > 1 && 上滤元素.调用(@比较属性) < @元素数组[索引 / 2].调用(@比较属性)
      @元素数组[索引] = @元素数组[索引 / 2]
      索引 = 索引 / 2
    end
    @元素数组[索引] = 上滤元素
  end
  def 下滤(索引)
    下滤元素 = @元素数组[索引]
    while (索引 * 2 <= @当前大小)
      子索引 = 索引 * 2
      子索引 += 1 if( 子索引 != @当前大小 && @元素数组[子索引 + 1].调用(@比较属性) < @元素数组[子索引].调用(@比较属性))
      @元素数组[子索引].调用(@比较属性) < 下滤元素.调用(@比较属性) ? @元素数组[索引] = @元素数组[子索引] : break
      索引 = 子索引
    end
    @元素数组[索引] = 下滤元素
  end
end

