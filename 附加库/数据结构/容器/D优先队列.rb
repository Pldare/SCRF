#!/usr/bin/env ruby -w
# encoding: UTF-8
class D优先队列
  可读属性 :比较属性, :元素数组, :当前大小
  def 初始化(比较属性, 元素数组 = [])
    @比较属性,@元素数组,@当前大小 = 比较属性,[],0
    元素数组.每个{|元素| 添加元素(元素)}
  end
  def 为空?;@当前大小 == 0 end
  def 最高优先级元素;@元素数组[1] end
  def 添加元素(元素)
    @元素数组[@当前大小 += 1] = 元素
    上滤(@当前大小)
  end
  def 获得最高优先级元素
    return nil if 为空?
    返回元素 = @元素数组[1]
    @元素数组[1] = @元素数组[@当前大小]
    @当前大小 -= 1
    下滤(1)
    返回元素
  end
  def 上滤(索引)
    上滤元素 = @元素数组[索引]
    while 索引 > 1 && 上滤元素.调用(@比较属性) < @元素数组[索引 / 2].调用(@比较属性)
      @元素数组[索引] = @元素数组[索引 / 2]
      索引 = 索引 / 2
    end
    @元素数组[索引] = 上滤元素
  end
  def 下滤(索引)
    下滤元素 = @元素数组[索引]
    while (索引 * 2 <= @当前大小)
      子索引 = 索引 * 2
      子索引 += 1 if( 子索引 != @当前大小 && @元素数组[子索引 + 1].调用(@比较属性) < @元素数组[子索引].调用(@比较属性))
      @元素数组[子索引].调用(@比较属性) < 下滤元素.调用(@比较属性) ? @元素数组[索引] = @元素数组[子索引] : break
      索引 = 子索引
    end
    @元素数组[索引] = 下滤元素
  end
  def 验证(最小值)
    (1 .. @当前大小).每个{|i| return false if @元素数组[i].调用(@比较属性) < 最小值}
    true
  end
  def 随机索引;随机(@当前大小 - 1) + 1 end
end
定义测试集 '优先队列测试' do
  测试初始化 do
    @元素类 = R结构体.新建(:行动时间)
    @优先队列 = D优先队列.新建('行动时间')
  end
  
  添加测试 '优先级变化测试', 10 do
    100.times{@优先队列.添加元素(@元素类.新建(随机(500)))}
    10.times do
      索引 = @优先队列.随机索引
      @优先队列.元素数组[索引].行动时间 -= 随机(5)
      @优先队列.上滤(索引)
      索引 = @优先队列.随机索引
      @优先队列.元素数组[索引].行动时间 += 随机(5)
      @优先队列.下滤(索引)
    end
    标记 = true
    100.times do
      最小元素 = @优先队列.获得最高优先级元素
      标记 = false unless @优先队列.验证(最小元素.行动时间)
    end
    标记.应该为 true
  end
end
