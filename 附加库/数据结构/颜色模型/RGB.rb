#!/usr/bin/env ruby -w
# encoding: UTF-8
需要 'HSV'
module SCRF
  class RGB
    可读属性 :红, :绿, :蓝
    def 初始化(*参数)
      @红, @绿, @蓝 = 参数.数量 == 1 ? 分解hex(参数[0]) : 参数
      数值验证
    end
    def 数值验证
      引发异常('RGB数值类型有误','红必须为整数') unless @红.是? R整数
      引发异常('RGB数值类型有误','绿必须为整数') unless @绿.是? R整数
      引发异常('RGB数值类型有误','蓝必须为整数') unless @蓝.是? R整数
      引发异常('RGB数值有误',"红值#{@红},超过了取值范围") if (@红 < 0 || @红 > 255)
      引发异常('RGB数值有误',"绿值#{@绿},超过了取值范围") if (@绿 < 0 || @绿 > 255)
      引发异常('RGB数值有误',"蓝值#{@蓝},超过了取值范围") if (@蓝 < 0 || @蓝 > 255)
    end
    def 分解hex(hex)
      引发异常('RGB参数有误','hex必须为长度七的字符串') unless hex.是?(R字符串) && hex.长度 == 7
      [hex[1..2].整数化(16), hex[3..4].整数化(16), hex[5..6].整数化(16)]
    end
    def 转换为hex;'#' << [@红, @绿, @蓝].收集{|数值| 数值.字符串(16).靠右(2, '0').大写}.连接 end
    def 转换为HSV
      参数数组 = [@红, @绿, @蓝]
      最大值 = 参数数组.最大值
      最小值 = 参数数组.最小值
      差值 = (最大值 - 最小值).浮点化
      亮度 = 最大值
      饱和度 = 差值 / 最大值
      if (差值 == 0)
        色调 = 0
      else
        色调 = case 最大值
               when @红 then (@绿 - @蓝) / 差值 * 60
               when @绿 then 120 + (@蓝 - @红) / 差值 * 60
               when @蓝 then 240 + (@红 - @绿) / 差值 * 60
               end
        色调 += 360 if 色调 < 0
      end
      HSV.新建(色调.四舍五入, 饱和度.四舍五入(2), 亮度)
    end
    def 字符串;"<RGB: #{@红}, #{@绿}, #{@蓝}>" end
    alias :to_s :字符串
  end
  
  描述 RGB do
    添加测试 'Hex转换测试' do
      期望(RGB.新建('#47A26F').转换为hex).等于 '#47A26F'
    end
    
    添加测试 'HSV转换测试' do
      期望(RGB.新建(71,102,99).转换为HSV.字符串).等于 '<HSV: 174, 0.3, 102>'
    end
  end
end