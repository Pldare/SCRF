#!/usr/bin/env ruby -w
# encoding: UTF-8
class D区域
  #https://www.zhihu.com/question/24251545/answer/27184187
  #设c为矩形中点，h为矩形半长，p为圆心，r为半径。
  #Vector2 v = abs(p - c);    // 第1步：转换至第1象限
  #Vector2 u = max(v - h, 0); // 第2步：求圆心至矩形的最短距离矢量
  #return dot(u, u) <= r * r; // 第3步：长度平方与半径平方比较
  def 矩形相交圆形?(矩形区域, 圆形区域)
    矩形中点 = 矩形区域.中点
    h = 矩形区域.高点 - 矩形中点
    v = (圆形区域.圆心 - 矩形中点).正向量
    u = (v - h).取大(0)
    u.模平方 <= 圆形区域.半径.平方
  end
end

描述 D区域 do
  需要 'D二维点'
  需要 'D矩形区域'
  需要 'D圆形区域'
  
  添加测试 '相交测试' do
    矩形1 = D矩形区域.创建(10, 10, 20, 20)
    矩形2 = D矩形区域.创建(15, 15, 30, 30)
    矩形3 = D矩形区域.创建(30, 40, 50, 50)
    圆1 = D圆形区域.创建(30, 30, 15)
    圆2 = D圆形区域.创建(42, 42, 30)
    圆3 = D圆形区域.创建(90, 90, 10)
    期望(矩形1.相交?(矩形2)).等于 true
    期望(矩形1.相交?(矩形3)).等于 false
    期望(圆1.相交?(圆2)).等于 true
    期望(圆1.相交?(圆3)).等于 false
    期望(矩形1.相交?(圆1)).等于 true
    期望(圆1.相交?(矩形1)).等于 true
    期望(矩形1.相交?(圆2)).等于 false
  end
  
  添加测试 '包围测试' do
    点1 = D二维点.新建(30, 30)
    点2 = D二维点.新建(300, 300)
    矩形1 = D矩形区域.创建(5, 5, 60, 60)
    矩形2 = D矩形区域.创建(15, 15, 30, 30)
    矩形3 = D矩形区域.创建(30, 40, 50, 65)
    圆1 = D圆形区域.创建(25, 25, 15)
    圆2 = D圆形区域.创建(30, 30, 5)
    圆3 = D圆形区域.创建(90, 90, 10)
    圆4 = D圆形区域.创建(55, 55, 40)
    期望(矩形1.包围?(矩形2)).等于 true
    期望(矩形2.包围?(矩形1)).等于 false
    期望(矩形1.包围?(矩形3)).等于 false
    期望(矩形1.包围?(点1)).等于 true
    期望(矩形1.包围?(点2)).等于 false
    期望(圆1.包围?(圆2)).等于 true
    期望(圆2.包围?(圆1)).等于 false
    期望(圆1.包围?(圆3)).等于 false
    期望(圆1.包围?(点1)).等于 true
    期望(圆1.包围?(点2)).等于 false
    期望(矩形1.包围?(圆1)).等于 true
    期望(矩形1.包围?(圆3)).等于 false
    期望(圆4.包围?(矩形3)).等于 true
    期望(圆1.包围?(矩形1)).等于 false
  end
end
