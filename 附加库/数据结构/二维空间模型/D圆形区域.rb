#!/usr/bin/env ruby -w
# encoding: UTF-8
需要类 'D区域'
class D圆形区域 < D区域
  可读属性 :圆心, :半径
  def self.创建(圆心x, 圆心y, 半径);新建(D二维点.新建(圆心x, 圆心y), 半径) end
  def 初始化(圆心, 半径);@圆心, @半径 = 圆心, 半径 end
  def 低点; @圆心.变动(-半径,-半径) end
  def 高点; @圆心.变动(半径,半径) end
  def 等于?(圆形区域);@圆心.等于?(圆形区域.圆心) && @半径.等于?(圆形区域.半径) end
  def 相交?(区域)
    case 区域
    when D矩形区域
      矩形相交圆形?(区域, self)
    when D圆形区域
      @圆心.距离(区域.圆心) < (@半径 + 区域.半径)
    else
      输出 "类 #{类} 的相交判断不支持该类型: #{区域.类}"
      false
    end
  end
  def 包围?(区域)
    case 区域
    when D圆形区域
      @圆心.距离(区域.圆心) < (@半径 - 区域.半径)
    when D矩形区域
      @圆心.距离(区域.中点) < (@半径 - 区域.对角线长度 / 2)
    else
      输出 "类 #{类} 的包围判断不支持该类型: #{区域.类}"
      false
    end
  end
  def 位移(向量);类.新建(@圆心.位移(向量), @半径) end
  def 字符串; "[#{@圆心.字符串}, #{半径}]" end
end
