#!/usr/bin/env ruby -w
# encoding: UTF-8
需要 'C帧数计算器'
需要 'C利用率计算器'
class C限帧器#每帧调用一次, 控制每秒最高帧数
  可读属性 :最高帧数, :每帧长度
  def 初始化(最高帧数, 是否计算利用率 = true, &利用率回调)
    @最高帧数, @每帧长度, @间隔实例 = 最高帧数, (1.0 / 最高帧数), C间隔.新建
    @帧数上限, @帧数下限, @修正值 = @最高帧数 + 1, @最高帧数 - 1, 0.01
    @帧数计算器 = C帧数计算器.新建(最高帧数 / 3){|帧数| 帧数反馈(帧数)}
    @利用率计算器 = C利用率计算器.新建(最高帧数 / 2, &利用率回调) if 是否计算利用率
  end
  def 当前帧数;@帧数计算器.帧数 end
  def 当前利用率;@利用率计算器.利用率 end
  def 限帧;循环{调用;yield} end
  def 进行调用
    @间隔实例.间隔 do |间隔时间|
      补时(间隔时间)
      @帧数计算器.进行调用
      @利用率计算器.进行调用(间隔时间)
    end
  end
  私有方法
  def 帧数反馈(帧数);@修正值 += (帧数 < @帧数下限 ? 0.001 : (帧数 > @帧数上限 ? -0.001 : 0)) end
  def 补时(间隔时间)
    if 间隔时间 < @每帧长度
      暂停时间 = @每帧长度 - 间隔时间 - @修正值
      暂停(暂停时间) if 暂停时间 > 0
    end
  end
end

描述 C限帧器 do
  之前 do
    @帧数 = 30
    @限帧器 = C限帧器.新建(@帧数)
  end
  
  添加测试 '限帧效果测试' do
    10.次{@限帧器.进行调用}
    期望(@限帧器.当前帧数).接近 @帧数, 2.5
  end
  
  添加测试 '每帧间距稳定性测试' do
    间隔实例 = C间隔.新建
    间隔范围 = 0.026..0.04
    10.次 do
      @限帧器.进行调用
      期望(间隔范围).包含 间隔实例.间隔
    end
  end
end