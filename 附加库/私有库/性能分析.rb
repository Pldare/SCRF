#!/usr/bin/env ruby -w
# encoding: UTF-8
module S性能分析器
  class C时间结构
    可读写属性 :起始时间, :共消耗时间
    def 初始化
      @起始时间 = R进程.时间[0]
      @共消耗时间 = 0.0
    end
  end
  class C统计结构
    可读写属性 :调用次数, :共消耗时间, :自己消耗时间, :调用名称
    def 初始化(调用名称)
      @调用次数 = 0
      @共消耗时间 = 0.0
      @自己消耗时间 = 0.0
      @调用名称 = 调用名称
    end
  end
  @开始时间 = nil
  @线程_时间栈_哈希 = nil
  @线程_线程哈希_哈希 = nil
  @开始处理 = R断点.新建(*%i[call c_call b_call]) {|信息|
    时间栈 = (@线程_时间栈_哈希[R线程.当前线程] ||= [])
    时间栈.入栈(C时间结构.新建)
  }
  @结束处理 = R断点.新建(*%i[return c_return b_return]) {|信息|
    时间栈 = (@线程_时间栈_哈希[R线程.当前线程] ||= [])
    if 时间 = 时间栈.出栈
      线程哈希 = (@线程_线程哈希_哈希[R线程.当前线程] ||= {})
      数据 = (线程哈希[信息.调用对象.hash + 信息.方法名称.hash] ||= C统计结构.新建(("#{信息.调用对象.inspect}#".sub(/\A\#<Class:(.*)>#\z/, '\1.') << 信息.方法名称.to_s)))
      数据.调用次数 += 1
      消耗时间 = R进程.时间[0] - 时间.起始时间
      数据.共消耗时间 += 消耗时间
      数据.自己消耗时间 += 消耗时间 - 时间.共消耗时间
      时间栈.末尾.共消耗时间 += 消耗时间 if 时间栈.末尾
    end
  }
  def self.开始分析
    @开始时间 = R进程.时间[0]
    @线程_时间栈_哈希 = {}
    @线程_线程哈希_哈希 = {}
    @开始处理.启用
    @结束处理.启用
  end
  def self.停止分析
    @开始处理.禁用
    @结束处理.禁用
  end
  def self.输出分析结果(输出对象 = STDERR)
    停止分析
    总耗时 = R进程.时间[0] - @开始时间
    总耗时 = 0.01 if 总耗时 == 0
    统计结果哈希 = {}
    @线程_线程哈希_哈希.所有值.每个 do |线程哈希|
      线程哈希.每对 do |键, 数据|
        总计数据 = (统计结果哈希[键] ||= C统计结构.新建(数据.调用名称))
        总计数据.调用次数 += 数据.调用次数
        总计数据.共消耗时间 += 数据.共消耗时间
        总计数据.自己消耗时间 += 数据.自己消耗时间
      end
    end

    输出对象.printf " 百分比   累积时间   自身时间   调用次数   自身时间   总计时间   调用名称\n"
    输出对象.printf "             秒         秒                  毫秒/次    毫秒/次\n"
    累积时间 = 0
    统计结果哈希.所有值.排序根据{|结果| -结果.自己消耗时间}.每个 do |结果|
      累积时间 += 结果.自己消耗时间
      调用次数 = 结果.调用次数
      自己消耗时间 = 结果.自己消耗时间
      输出对象.printf "%6.2f %9.2f  %9.2f %11d ", 自己消耗时间/总耗时*100, 累积时间, 自己消耗时间, 调用次数
      输出对象.printf "%10.2f %10.2f    %s\n", 自己消耗时间*1000/调用次数, 结果.共消耗时间*1000/调用次数, 结果.调用名称
    end
    输出对象.printf "%6.2f %9.2f  %9.2f %11d ", 0.0, 总耗时, 0.0, 1     
    输出对象.printf "%10.2f %10.2f    %s\n", 0.0, 总耗时*1000, "#toplevel" 
  end
end
RubyVM::InstructionSequence.compile_option = {
  :trace_instruction => true,
  :specialized_instruction => false
}
END {
  S性能分析器::输出分析结果
}
S性能分析器::开始分析