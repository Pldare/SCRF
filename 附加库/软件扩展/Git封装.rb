#!/usr/bin/env ruby -w
# encoding: UTF-8
需要 'S消息框'
class Git仓库
  def 初始化(仓库路径);@仓库路径 = 仓库路径 end
  def 切换至(分支名);执行命令('checkout', 分支名) end
  def 重订(分支名);执行命令('rebase', 分支名) end
  def 继续重订;执行命令('rebase', '--continue') end
  def 推(分支名);切换至(分支名);执行命令('push', 'origin', 分支名) end
  def 拉(分支名, 重订 = false);切换至(分支名);执行命令('pull', ('--rebase' if 重订), 'origin', 分支名) end
  def 挑拣(*参数);执行命令('cherry-pick', *参数) end
  def 状态;执行命令('status') end
  def 显示(*参数);执行命令('show', *参数) end
  def 当前分支;状态.分割(' ')[2] end
  def 日志(分支名, 起始时间: nil, 格式: nil)
    命令 = 命令('log', 分支名, '--no-merges')
    命令.添加参数("--since=\"#{起始时间}\"") if 起始时间
    命令.添加参数("--pretty=format:\"#{格式}\"") if 格式
    命令.执行
  end
  def 获取提交(分支名, 起始时间, 已合并哈希hash = {})
    日志(分支名, 起始时间: 起始时间, 格式: '%s丨%ai丨%H丨%an丨%cn').每行.收集 do |行|
      提交参数 = 行.尾部去除.分割('丨')
      Git提交.新建(self, *提交参数, 已合并哈希hash[提交参数[2]])
    end.排序根据{|提交| 提交.提交时间}
  end
  def 命令(*参数);Git命令.新建(@仓库路径, *参数) end
  def 执行命令(*参数);命令(*参数).执行 end
  def 字符串;@仓库路径 end
end
class Git命令
  def 初始化(仓库路径, *参数);@仓库路径, @参数数组 = 仓库路径, 参数.去无 end
  def 生成;"git #{@参数数组.连接(' ')}" end
  def 添加参数(参数);@参数数组 << 参数 end
  def 执行;R目录.改变当前工作目录(@仓库路径){`#{生成}`} end
end
class Git提交
  可读属性 :提交说明, :提交时间, :提交哈希, :作者, :提交者, :未合并
  def 初始化(仓库, 提交说明, 提交时间, 提交哈希, 作者, 提交者, 是否合并)
    @仓库, @提交说明, @提交时间 = 仓库, 提交说明, R时间.解析(提交时间)
    @提交哈希, @作者, @提交者, @未合并 = 提交哈希, 作者, 提交者, !是否合并
  end
  def 详细内容;@仓库.显示(@提交哈希) end
  def 挑拣(需要确认 = true)
    return if S消息框.显示("合并#{@提交说明}?", '确认', :确定_取消) == :取消 if 需要确认
    @仓库.挑拣(@提交哈希)
    输出 "#{@提交哈希} #{@提交说明} 已合并"
  end
  def 字符串;"- #{@是否合并 ? '已合并' : '未合并'} #{@提交时间} #{@作者} #{@提交哈希} #{@提交说明}" end
end
