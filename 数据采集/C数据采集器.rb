#!/usr/bin/env ruby -w
# encoding: UTF-8
需要 'R超时'
class C数据采集器
  def 初始化(*参数范围数组, &块);@参数范围数组, @待采集块 = 参数范围数组, 块 end
  def 进行采集(采集限制时间 = 60, 输出采集信息 = false, 记录消耗时间 = false)
    @采集限制时间, @输出采集信息, @采集结果 = 采集限制时间, 输出采集信息, {}
    组合总数, 端点组合数量 = @参数范围数组.收集(&:数量).注入(&:*), 2**@参数范围数组.数量
    @采集限制时间 -= 耗时{计算平均消耗时间(组合总数)}
    输出 "平均消耗时间: #{@平均消耗时间}" if @输出采集信息
    还可采集次数 = @采集限制时间 / @平均消耗时间
    输出 "还可采集次数: #{还可采集次数}   端/总: #{端点组合数量}/#{组合总数}" if @输出采集信息
    if (还可采集次数 >= 组合总数)#采集所有输入情况的数据
      限时(@采集限制时间){范围内采集(@参数范围数组)}
    elsif (还可采集次数 >= 端点组合数量)#优先采集端点组合数据, 然后随机采集直到超时返回结果
      端点数组 = @参数范围数组.收集{|范围| [范围.前, 范围.后]}
      @采集限制时间 -= 耗时{限时(@采集限制时间){范围内采集(端点数组)}}
      随机采集至超时
    else
      引发异常('数据采集异常','采集时间不足')
    end
    return @采集结果
  rescue E超时异常 => 超时异常
    引发异常('数据采集异常','数据采集超时')
  end
  def 计算平均消耗时间(组合总数)
    测试次数 = 获得取样数量(组合总数)
    测试比例 = 测试次数.浮点化/组合总数
    输出 "测试次数: #{测试次数}   测试比例: #{测试比例}" if @输出采集信息
    限时(@采集限制时间 * (测试比例 > 0.3 ? 测试比例 : 0.3)) do
      平均消耗时间 = 测试次数.次.收集{耗时{随机采集}}.平均值
      @平均消耗时间 = (平均消耗时间 < 0.0001 ? 0.0001 : 平均消耗时间)
    end
  end
  def 获得取样数量(总数量)
    if 总数量 < 3 then 总数量
    elsif 总数量 < 300 then (总数量**0.5).四舍五入 + 1
    else (总数量**0.5/2).四舍五入 + 9
    end
  end
  def 随机采集至超时;限时(@采集限制时间){循环{随机采集}};rescue E超时异常; end
  def 随机采集;单次采集(@参数范围数组.收集(&:取样)) end
  def 范围内采集(范围数组);R数学.笛卡尔积(*范围数组){|参数数组| 单次采集(参数数组)} end
  def 单次采集(参数数组);@采集结果[参数数组] = @待采集块[*参数数组] unless @采集结果[参数数组] end
end