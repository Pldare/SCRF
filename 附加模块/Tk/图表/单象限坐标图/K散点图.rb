#!/usr/bin/env ruby -w
# encoding: UTF-8
需要类 'K单象限坐标图'
class K散点图 < K单象限坐标图
  @@散点数据类 = R结构体.新建(:名称, :点对, :颜色)
  def 初始化(父界面 = nil, 宽 = 600, 高 = 400, p = 1.5/20, 点大小 = 1)
    super(父界面, 宽, 高, p)
    @点大小, @散点数据集 = 点大小, []
  end
  def 自动设置坐标范围
    横坐标区间 = @散点数据集.收集{|数据| 数据.点对.收集{|点| 点[0]}}.重整.最小值最大值
    纵坐标区间 = @散点数据集.收集{|数据| 数据.点对.收集{|点| 点[1]}}.重整.最小值最大值
    @横坐标范围, @纵坐标范围 = R范围.新建(*横坐标区间).扩大化, R范围.新建(*纵坐标区间).扩大化
    计算纵横比例
  end
  def 添加散点数据(数据名称 = '', 点对 = [], 散点颜色 = 获取配色)#数据为[[x1,y1],[x2,y2]]
    @散点数据集 << @@散点数据类.新建(数据名称, 点对, 散点颜色)
  end
  def 绘制散点;@散点数据集.每个{|散点数据| 散点数据.点对.每个{|x, y| 绘制点(x, y, 散点数据.颜色)}} end
  def 绘制说明
    起点, 色块边长, 单个说明长度 = 点(@宽*@p+10, @高*@p), @高*@p*0.5, @表宽 / @散点数据集.数量
    @散点数据集.每个 do |数据|
      色块 = 矩形(起点, 起点.变动(色块边长, -色块边长))
      色块.填充色, 色块.宽度 = 数据.颜色, 0
      文本(起点.x变动(色块边长 + 8), 数据.名称).锚定 = 'nw'#说明文字
      起点 = 起点.x变动(单个说明长度)
    end
  end
  def 绘制点(x, y, 填充色)
    点 = 圆(@起点.变动((x - @横坐标范围.起点) * @横比例, (y - @纵坐标范围.起点) * @纵比例), @点大小)
    点.填充色 = 填充色
  end
  def 绘制显示内容
    super
    绘制散点
    绘制说明
  end
end
