#!/usr/bin/env ruby -w
# encoding: UTF-8
需要 'R超时'
class C数据采集器
  def 初始化(参数名称数组 = nil, 参数范围数组 = nil, &块)
    @参数名称数组, @参数范围数组, @块 = 参数名称数组, 参数范围数组, 块
  end
  def 设置参数名称(*参数名称数组);@参数名称数组 = 参数名称数组 unless 参数名称数组.为空? end
  def 设置参数范围(*参数范围数组);@参数范围数组 = 参数范围数组 unless 参数范围数组.为空? end
  def 设置块(&块);@块 = 块 end
  def 进行采集(限制时间 = 60, 输出采集信息 = false, 记录耗时 = false)
    引发异常('数据采集异常','有参数未设置') unless (@参数名称数组 && @参数范围数组 && @块)
    @限制时间, @输出采集信息, @采集结果 = 限制时间, 输出采集信息, {}
    @采集方式, 时间 = 记录耗时 ? :单次计时采集 : :单次不计时采集, R时间.现在
    @结果类 = R结构体.新建(*@参数名称数组.收集(&:符号化) + [:结果] + (记录耗时 ? [:消耗时间] : []))
    组合总数 = @参数范围数组.收集(&:数量).注入(&:*)
    端点组合数量 = 2**@参数范围数组.数量{|范围| 范围.数量 > 1}
    @限制时间 -= 耗时{计算平均消耗时间(组合总数)}
    输出 "平均消耗时间: #{@平均消耗时间}" if @输出采集信息
    还可采集次数 = @限制时间 / @平均消耗时间
    输出 "还可采集次数: #{还可采集次数}   端/总: #{端点组合数量}/#{组合总数}" if @输出采集信息
    if (还可采集次数 >= 组合总数)#采集所有输入情况的数据
      限时(@限制时间){范围内采集(@参数范围数组)}
    elsif (还可采集次数 >= 端点组合数量)#优先采集端点组合数据, 然后随机采集直到超时返回结果
      端点数组 = @参数范围数组.收集{|范围| [范围.前, 范围.后]}
      @限制时间 -= 耗时{限时(@限制时间){范围内采集(端点数组)}}
      随机采集至超时
    else
      引发异常('数据采集异常','采集时间不足')
    end
    输出 "数据采集结束, 共耗时: #{R时间.现在 - 时间}" if @输出采集信息
    return @采集结果.所有值
  rescue E超时异常 => 超时异常
    引发异常('数据采集异常','数据采集超时')
  end
  def 计算平均消耗时间(组合总数)
    测试次数 = 获得取样数量(组合总数)
    测试比例 = 测试次数.浮点化/组合总数
    输出 "测试次数: #{测试次数}   测试比例: #{测试比例}" if @输出采集信息
    限时(@限制时间 * (测试比例 > 0.3 ? 测试比例 : 0.3)) do
      平均消耗时间 = 测试次数.次.收集{耗时{随机采集}}.平均值
      @平均消耗时间 = (平均消耗时间 < 0.0001 ? 0.0001 : 平均消耗时间)
    end
  end
  def 获得取样数量(总数量)
    if 总数量 < 3 then 总数量
    elsif 总数量 < 300 then (总数量**0.5).四舍五入 + 1
    else (总数量**0.5/2).四舍五入 + 9
    end
  end
  def 随机采集至超时;限时(@限制时间){循环{随机采集}};rescue E超时异常; end
  def 随机采集;单次采集(@参数范围数组.收集(&:取样)) end
  def 范围内采集(范围数组);R数学.笛卡尔积(*范围数组){|参数数组| 单次采集(参数数组)} end
  def 单次采集(参数数组);调用(@采集方式, 参数数组) unless @采集结果[参数数组] end
  def 单次计时采集(参数数组)
    时间, 结果 = R时间.现在, @块[*参数数组]
    @采集结果[参数数组] = @结果类.新建(*参数数组, 结果, R时间.现在 - 时间)
  end
  def 单次不计时采集(参数数组);@采集结果[参数数组] = @结果类.新建(*参数数组, @块[*参数数组]) end
end

定义测试集 '数据采集测试' do
  添加测试 '多参数数据采集测试' do
    数据集 = C数据采集器.新建([:x, :y, :z], [1..5, 10..15, 50..55]){|x,y,z| x * y - z}.进行采集
    数据集.每个{|数据| return false if (数据.x * 数据.y - 数据.z) != 数据.结果} 
  end
  
  添加测试 '耗时信息采集测试' do
    数据集 = C数据采集器.新建([:时间], [3..5]){|时间| 暂停(时间 / 100.0)}.进行采集(1, false, true)
    数据集.每个{|数据| return false if (数据.时间 / 100.0 - 数据.消耗时间).绝对值 > 0.015} 
  end
  
  添加测试 '采集单次超时测试' do
    begin
      C数据采集器.新建([:x], [1..10]){|x| 暂停(0.2)}.进行采集(0.1)
    rescue E异常 => 异常
      return true if 异常.为?('数据采集异常', '数据采集超时')
    end
    false
  end
  
  添加测试 '采集多次超时测试' do
    消耗时间 = 耗时 {C数据采集器.新建([:x], [1..50]){|x| 暂停(0.01)}.进行采集(0.3)}
    (消耗时间 - 0.3).绝对值 < 0.02
  end
end