#!/usr/bin/env ruby -w
# encoding: UTF-8
module M数据分析
  class C输入
    可读属性 :名称, :范围, :取样上限, :分型系数, :顺序
    def 初始化(名称, 范围: nil, 取样上限: 1000000, 分型系数: 2, 顺序: 时间戳)
      引发异常('采集输入生成器异常',"输入#{名称}没有范围") unless 范围
      引发异常('采集输入生成器异常',"输入#{名称}的范围#{范围}有误") if 范围.差值 < 0
      引发异常('采集输入生成器异常',"输入#{名称}的分型系数#{分型系数}有误") unless 分型系数.属于? R整数
      @名称, @范围, @取样上限, @分型系数, @顺序 = 名称, 范围, 取样上限, 分型系数, 顺序
      @分型等级, @之前取样数组, @当前取样数组 = 0, [], [范围.起点, 范围.终点].去重
      @是否取整 = 范围.起点.属于?(R整数) && 范围.终点.属于?(R整数)
      @取样上限 = (@范围.差值 + 1) if (@是否取整 && @范围.差值 < 取样上限)
      @范围起点, @范围差值 = 范围.起点, 范围.差值.浮点化
      @取样数量 = @当前取样数组.数量
    end
    def 取样
      return if @当前取样数组.为空?
      @之前取样数组 += @当前取样数组
      @当前取样数组 = []
      if (@取样数量 < 取样上限)
        @分型等级 += 1
        分型数量 = @分型系数**@分型等级
        每块大小 = @范围差值 / 分型数量
        @当前取样数组 = 分型数量.次.收集{|块数| @范围起点 + 每块大小 * 块数}
        @当前取样数组.替换!{|样本| 样本.整数化} if @是否取整
        @当前取样数组 -= @之前取样数组
        @当前取样数组 = @当前取样数组.洗牌.前(@取样上限 - @取样数量) if (@取样数量 + @当前取样数组.数量 > @取样上限)
        @取样数量 += @当前取样数组.数量
      end
    end
    def 取样数组;@之前取样数组 + @当前取样数组 end
    def 无新取样?;@当前取样数组.为空? end
    def 时间戳;(R进程.单调时钟时间 * 1000000).整数化 end
  end
  
  描述 C输入 do
    添加测试 '取样测试' do
      输入 = C输入.新建('测试', 范围: 1..100, 取样上限: 9, 分型系数: 3)
      期望(输入.取样数组.数量).等于 2
      期望(输入.无新取样?).等于 false
      输入.取样
      期望(输入.取样数组.数量).等于 4
      期望(输入.无新取样?).等于 false
      输入.取样
      期望(输入.取样数组.数量).等于 9
      期望(输入.无新取样?).等于 false
      输入.取样
      期望(输入.无新取样?).等于 true
    end
    
    添加测试 '单点取样测试' do
      输入 = C输入.新建('测试', 范围: 1..1, 取样上限: 9)
      期望(输入.取样数组.数量).等于 1
      期望(输入.无新取样?).等于 false
      输入.取样
      期望(输入.取样数组.数量).等于 1
      期望(输入.无新取样?).等于 true
    end
  end
end